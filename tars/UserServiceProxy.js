// **********************************************************************
// Parsed By TarsParser(1.2.0), Generated By tars2node(20200315)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "UserService.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;
var _TARS_MODULE_A_ = require("./DataBaseServiceTars.js");
var _TARS_MODULE_B_ = require("./StatusCodeTars.js");

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var RentHouse = RentHouse || {};
module.exports.RentHouse = RentHouse;

RentHouse.UserServiceProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

RentHouse.UserServiceProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

RentHouse.UserServiceProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

RentHouse.UserServiceProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

RentHouse.UserServiceProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __RentHouse_UserService$login$IF = {
    "name" : "login",
    "return" : "int32",
    "arguments" : [{
        "name" : "name",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "password",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "loginUser",
        "class" : "RentHouse.User",
        "direction" : "out"
    }, {
        "name" : "status",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __RentHouse_UserService$login$IE = function (name, password) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, name);
    os.writeString(2, password);
    return os.getBinBuffer();
};

var __RentHouse_UserService$login$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "loginUser" : is.readStruct(3, true, _TARS_MODULE_A_.RentHouse.User),
                    "status" : is.readInt32(4, true, _TARS_MODULE_B_.RentHouse.StatusCode.SUCCESS)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __RentHouse_UserService$login$PE = function (name, password, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("name", name);
    tup.writeString("password", password);
    return tup;
};

var __RentHouse_UserService$login$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "loginUser" : tup.readStruct("loginUser", _TARS_MODULE_A_.RentHouse.User),
                    "status" : tup.readInt32("status")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __RentHouse_UserService$login$ER = function (data) {
    throw _makeError(data, "Call UserService::login failed");
};

RentHouse.UserServiceProxy.prototype.login = function (name, password) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("login", __RentHouse_UserService$login$PE(name, password, version), arguments[arguments.length - 1], __RentHouse_UserService$login$IF).then(__RentHouse_UserService$login$PD, __RentHouse_UserService$login$ER);
    } else {
        return this._worker.tars_invoke("login", __RentHouse_UserService$login$IE(name, password), arguments[arguments.length - 1], __RentHouse_UserService$login$IF).then(__RentHouse_UserService$login$ID, __RentHouse_UserService$login$ER);
    }
};
RentHouse.UserServiceProxy.login = __RentHouse_UserService$login$IF;



